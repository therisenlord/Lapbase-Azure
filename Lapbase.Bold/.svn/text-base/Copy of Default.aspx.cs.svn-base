using System;
using System.Data;
using System.Collections;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.Web.UI;

public partial class _Default : Lapbase.Business.BasePage
{
    GlobalClass gClass = new GlobalClass();

    /// <summary>
    /// Gets or sets the User's Password.
    /// </summary>
    internal String UserPassword
    {
        get 
        { 
            Object obj = ViewState["Password"];
            if (obj == null)
                return txtUserPW.Text;
            else
                return obj.ToString();
        }
        set { ViewState["Password"] = txtUserPW.Text; }
    }

    protected override void OnPreInit(EventArgs e)
    {
        /*IMPORTANT : because of using ajax function (javascript and asp.net), the browser MUST have no-cache setting*/
        Response.CacheControl = "no-cache";
        Response.AddHeader("Pragma", "no-cache");
        Response.Expires = -1;
        base.DomainURL = Request.Url.Host;
        base.OnPreInit(e);
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            try
            {
                InitializePage();
            }
            catch (Exception err)
            {
                divErrorMessage.Style["display"] = "block";
                divErrorMessage.InnerText = "Lapbase is currently down for maintenance...";
                gClass.AddErrorLogData("0", Request.Url.Host, "", "login Form", "Page_Load function", err.ToString());
            }
        }
        else
            Response.Cookies.Set(new HttpCookie("LanguageCode", cmbLanguage.SelectedValue));
        return;
    }

    #region private void InitializePage
    /*
     * this function is to initialize some variables which are used during runtime such as connectionstring
     */
    private void InitializePage()
    {
        bodyLogon.Attributes.Add("onload", "javascript:InitializePage();");
        SettingCookies();
        FetchLanguage();
        //CheckUserLanguage();
        MakeConnectionString("DBConnectionString");
        return;
    }
    #endregion

    #region private void SettingCookies()
    /*this function is to create and add some cookies on client's browser, 
     notice : 
     * the 2 cookies LanguageCode and OrganizationCode has the maximum date to expire, it means that as long as client doesn't clear browser settings, 
     * these cookies are alive. */
    private void SettingCookies()
    {
        Request.Cookies.Clear();
        Response.Cookies.Clear();

        Response.SetCookie(new HttpCookie("LanguageCode", ""));
        Response.Cookies["LanguageCode"].Expires = DateTime.MaxValue;
        Response.SetCookie(new HttpCookie("OrganizationCode", ""));
        Response.Cookies["OrganizationCode"].Expires = DateTime.MaxValue;

        Response.SetCookie(new HttpCookie("Direction", ""));
        Response.SetCookie(new HttpCookie("CultureInfo", ""));
        Response.SetCookie(new HttpCookie("UserPracticeCode", ""));
        //Response.SetCookie(new HttpCookie("Group_Code", ""));
        Response.SetCookie(new HttpCookie("PatientID", "0"));
        Response.SetCookie(new HttpCookie("Logon_UserName", ""));
        Response.SetCookie(new HttpCookie("Imperial", ""));
        Response.SetCookie(new HttpCookie("SubmitData", ""));
        Response.SetCookie(new HttpCookie("AutoSave", ""));
        Response.SetCookie(new HttpCookie("VisitWeeksFlag", ""));
        //Response.SetCookie(new HttpCookie("DefaultSort", ""));
        Response.SetCookie(new HttpCookie("PracticeBoldCode", ""));
        Response.SetCookie(new HttpCookie("ConsultID", "0"));
    }
    #endregion

    #region private void CheckUserLanguage()
    /*
     * when user enters the URL of his/her organization and login page is loaded, 
     * the application checks whether there is language cookie is alive or not, if so, the application uses the value of this cookie and changes all captions,
     * if there is not any value for this cookie, the application selects the english-US as a default language and load english titles and captions
     */
    private void CheckUserLanguage()
    {
        bool IsFound = false;

        try
        {
            try 
            {
                if (Request.Cookies["LanguageCode"].Value.Trim().Length > 0)
                    for (int Xh = 0; (Xh < cmbLanguage.Items.Count) && !IsFound; Xh++)
                        if (cmbLanguage.Items[Xh].Value.IndexOf(Request.Cookies["LanguageCode"].Value) >= 0)
                        {
                            cmbLanguage.SelectedIndex = Xh;
                            IsFound = true;
                        }
            }
            catch { IsFound = false; }

            if (!IsFound)
            {
                cmbLanguage.SelectedValue = "en-us en-US LTR";
                Response.SetCookie(new HttpCookie("LanguageCode", "en-us en-US LTR"));
            }
        }
        catch 
        {
            Response.SetCookie(new HttpCookie("LanguageCode", "en-us en-US LTR"));
        }
    }
    #endregion

    #region private void FetchLanguage()
    private void FetchLanguage()
        /*
         * 1) check the tblOrganization for the organization name in Request.Url.Host,
         *    if there is any language code for current organization, we just load the language name and set Cookies "LanguageCode", "CultureInfo" 
         *    for current organization and hide the Language dropdown list
         * 2) otherwise, we fill Language dropdown list and user select his/her language
         */
    {
        String strLanguage, strLanguageCode, strCultureInfo, strDirection;

        strLanguage = strLanguageCode = strCultureInfo = strDirection = String.Empty;
        if (gClass.DoesOrganizationHaveLanguage(Request.Url.Host, out strLanguage, out strLanguageCode, out strCultureInfo, out strDirection))
        {
            lblLangauge.Text = strLanguage;
            lblCultureInfo.Text = strLanguageCode + " " + strCultureInfo + " " + strDirection;
            //Request.Cookies["LanguageCode"].Value = strLanguageCode;
            base.LanguageCode = strLanguageCode;
            base.CultureInfo = strCultureInfo;
            lblCultureInfo.Style.Add("display", "none");
            cmbLanguage.Style.Add("display", "none");
        }
        else
        {
            lblLangauge.Text = "";
            lblCultureInfo.Text = "";
            DataView dvLangauge = gClass.FetchLanguages().Tables[0].DefaultView;
            cmbLanguage.DataSource = dvLangauge;
            cmbLanguage.DataMember = "tblLanguages";
            cmbLanguage.DataTextField = "Language_Name";
            cmbLanguage.DataValueField = "LanguageInfo";
            cmbLanguage.DataBind();
            cmbLanguage.Items.Insert(0, new ListItem("Choose from ..."));
            cmbLanguage.Items[0].Selected = true;
        }
    }
    #endregion

    #region private void MakeConnectionString
    private void MakeConnectionString(string strConnection)
    {
        string strConnectionString = System.Configuration.ConfigurationManager.AppSettings[strConnection];
        GlobalClass.strLapbaseCnnString = System.Configuration.ConfigurationManager.AppSettings[strConnection];
        GlobalClass.strSqlCnnString = System.Configuration.ConfigurationManager.ConnectionStrings["SqlDBConnectionString"].ConnectionString;
    }
    #endregion

    #region protected void btnLogonServer_OnClick(object sender, EventArgs e)
    /*
     * this function is an asp.net ajax function and called when user clicks the LOGIN button, 
     * this function checks
     * 1) user credential data (user name and password)
     * 2) if the user is a permitted user for the current organization, checks that this is the first login of the user or not,
     * 3) if this is the first login, the application asks user to confirm and change his/her password (by loading new page and changing the title of button to update login
     * 4) if user is not a valid user, the proper message is loaded
     * 5) if user enters wrong credential for 5 times, his/her account is suspented
     * 6) if user is a valid user of the current organization, the application browses the patient lists page (this task is done at the client-side "login.js"
     */
    /** /
    protected void btnLogonServer_OnClick(object sender, EventArgs e)
    {
        string strScript = String.Empty, strReturn = String.Empty;

        SetLanguageInfo(lblCultureInfo.Text);
        if (btnLogonServer.Text.ToUpper().Equals("LOGIN"))
        {
            try
            {
                if (CheckUserData(ref strReturn))
                {
                    if (IsNewUser())
                    {
                        DivErrorMessageScriptBuilder(ref strScript, "none", "");
                        strScript += "document.getElementById('divLogin').style.display = 'none';";
                        strScript += "document.getElementById('divChangePassword').style.display = 'block';";
                        btnLogonServer.Text = "Update password";
                    }
                    else if (gClass.ValidDays <= Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["ValidDays"]))
                    {
                        DivErrorMessageScriptBuilder(ref strScript, "none", "");
                        strScript += "document.location.assign('Forms/PatientsVisits/PatientsVisitsForm.aspx');";
                    }
                    else
                    {
                        DivErrorMessageScriptBuilder(ref strScript, "block", "Your password has expired after 90, please enter a new one...");
                        strScript += "document.getElementById('divLogin').style.display = 'none';";
                        strScript += "document.getElementById('divChangePassword').style.display = 'block';";
                        btnLogonServer.Text = "Update password";
                    }
                }
                else
                {
                    DivErrorMessageScriptBuilder(ref strScript, "block", strReturn);
                    ControlUnsucessfulLogin();
                }
            }
            catch (Exception err)
            {
                DivErrorMessageScriptBuilder(ref strScript, "block", "Sorry, please contact System Administrator...");
                gClass.AddErrorLogData(String.Empty, Request.Url.Host, String.Empty, "Login Form", "btnLogonServer_OnClick function", err.ToString());
            }
        }
        else // Update Password
        {
            Boolean flag = (txtNewUserPW.Text.Trim().Length == 0) || (txtNewUserPW_Confirm.Text.Trim().Length == 0);

            if (flag)
                DivErrorMessageScriptBuilder(ref strScript, "block", "Please enter new password fields...");
            else if (!txtNewUserPW.Text.Trim().Equals(txtNewUserPW_Confirm.Text.Trim()))
                DivErrorMessageScriptBuilder(ref strScript, "block", "The password was not correctly confirmed. Please ensure that the password and confirmation match exactly....");
            else
                try
                {
                    if (!CheckLast5Password())
                    {
                        UpdatePasswordHistory();
                        DivErrorMessageScriptBuilder(ref strScript, "none", "");
                        strScript += "document.location.assign('Forms/PatientsVisits/PatientsVisitsForm.aspx');";
                    }
                    else
                        DivErrorMessageScriptBuilder(ref strScript, "block", "The new password is duplicate with your 5 previous passwords...");
                }
                catch (Exception err)
                {
                    DivErrorMessageScriptBuilder(ref strScript, "block", "Error in updating new password, please contact System Administrator...");
                    gClass.AddErrorLogData(String.Empty, Request.Url.Host, String.Empty, "Login Form", "Update new password function", err.ToString());
                }
        }
        ScriptManager.RegisterStartupScript(btnLogonServer, btnLogonServer.GetType(), "key", strScript, true);
    }
    /**/
    #endregion 

    protected void btnLogonServer_OnClick(object sender, EventArgs e)
    {
        string strScript = String.Empty, strReturn = String.Empty;
        Lapbase.Business.Login objLogin = new Lapbase.Business.Login();
        objLogin.UserID = txtUserID.Text;
        objLogin.Password = this.UserPassword;
        objLogin.OrganizationName = base.DomainURL;
        objLogin.LoginPage = true;

        SetLanguageInfo(lblCultureInfo.Text);
        if (objLogin.CheckUserCredential())
        {
            if (btnLogonServer.Text.ToUpper().Equals("LOGIN"))
            {
                this.UserPassword = txtUserPW.Text;
                strReturn = objLogin.MessageContent;
                SetBaseData(ref objLogin);
                if (objLogin.NewUser)
                {
                    DivErrorMessageScriptBuilder(ref strScript, "none", "");
                    strScript += "document.getElementById('divLogin').style.display = 'none';";
                    strScript += "document.getElementById('divChangePassword').style.display = 'block';";
                    btnLogonServer.Text = "Update password";
                }
                else if (objLogin.ValidDays <= Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["ValidDays"]))
                {
                    DivErrorMessageScriptBuilder(ref strScript, "none", "");
                    strScript += "document.location.assign('Forms/PatientsVisits/PatientsVisitsForm.aspx');";
                }
                else
                {
                    DivErrorMessageScriptBuilder(ref strScript, "block", "Your password has expired after 90, please enter a new one...");
                    strScript += "document.getElementById('divLogin').style.display = 'none';";
                    strScript += "document.getElementById('divChangePassword').style.display = 'block';";
                    btnLogonServer.Text = "Update password";
                }
            }
            else
            {
                Boolean flag = (txtNewUserPW.Text.Trim().Length == 0) || (txtNewUserPW_Confirm.Text.Trim().Length == 0);

                if (flag)
                    DivErrorMessageScriptBuilder(ref strScript, "block", "Please enter new password fields...");
                else if (!txtNewUserPW.Text.Trim().Equals(txtNewUserPW_Confirm.Text.Trim()))
                    DivErrorMessageScriptBuilder(ref strScript, "block", "The password was not correctly confirmed. Please ensure that the password and confirmation match exactly....");
                else
                    try
                    {
                        if (!objLogin.CheckUserPasswordHistory(txtNewUserPW.Text.Trim()))
                        {
                            objLogin.UpdatePasswordHistory(txtNewUserPW.Text.Trim());
                            DivErrorMessageScriptBuilder(ref strScript, "none", "");
                            strScript += "document.location.assign('Forms/PatientsVisits/PatientsVisitsForm.aspx');";
                        }
                        else
                            DivErrorMessageScriptBuilder(ref strScript, "block", "The new password is duplicate with your 5 previous passwords...");
                    }
                    catch (Exception err)
                    {
                        DivErrorMessageScriptBuilder(ref strScript, "block", "Error in updating new password, please contact System Administrator...");
                        gClass.AddErrorLogData(String.Empty, Request.Url.Host, String.Empty, "Login Form", "Update new password function", err.ToString());
                    }
            }
        }
        else
        {
            strReturn = objLogin.MessageContent;
            DivErrorMessageScriptBuilder(ref strScript, "block", strReturn);
            ControlUnsucessfulLogin();
        }

        /** /
        if (btnLogonServer.Text.ToUpper().Equals("LOGIN"))
        {
            try
            {
                if (objLogin.CheckUserCredential( ))
                {
                    this.UserPassword = txtUserPW.Text;
                    strReturn = objLogin.MessageContent;
                    SetBaseData(ref objLogin);
                    if (objLogin.NewUser)
                    {
                        DivErrorMessageScriptBuilder(ref strScript, "none", "");
                        strScript += "document.getElementById('divLogin').style.display = 'none';";
                        strScript += "document.getElementById('divChangePassword').style.display = 'block';";
                        btnLogonServer.Text = "Update password";
                    }
                    else if (objLogin.ValidDays <= Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["ValidDays"]))
                    {
                        DivErrorMessageScriptBuilder(ref strScript, "none", "");
                        strScript += "document.location.assign('Forms/PatientsVisits/PatientsVisitsForm.aspx');";
                    }
                    else
                    {
                        DivErrorMessageScriptBuilder(ref strScript, "block", "Your password has expired after 90, please enter a new one...");
                        strScript += "document.getElementById('divLogin').style.display = 'none';";
                        strScript += "document.getElementById('divChangePassword').style.display = 'block';";
                        btnLogonServer.Text = "Update password";
                    }
                }
                else
                {
                    strReturn = objLogin.MessageContent;
                    DivErrorMessageScriptBuilder(ref strScript, "block", strReturn);
                    ControlUnsucessfulLogin();
                }
            }
            catch (Exception err)
            {
                DivErrorMessageScriptBuilder(ref strScript, "block", "Sorry, please contact System Administrator...");
                gClass.AddErrorLogData(String.Empty, Request.Url.Host, String.Empty, "Login Form", "btnLogonServer_OnClick function", err.ToString());
            }
        }
        else // Update Password
        {
            Boolean flag = (txtNewUserPW.Text.Trim().Length == 0) || (txtNewUserPW_Confirm.Text.Trim().Length == 0);

            if (flag)
                DivErrorMessageScriptBuilder(ref strScript, "block", "Please enter new password fields...");
            else if (!txtNewUserPW.Text.Trim().Equals(txtNewUserPW_Confirm.Text.Trim()))
                DivErrorMessageScriptBuilder(ref strScript, "block", "The password was not correctly confirmed. Please ensure that the password and confirmation match exactly....");
            else
                try
                {
                    if (!objLogin.CheckUserPasswordHistory(txtNewUserPW.Text.Trim()))
                    {
                        objLogin.UpdatePasswordHistory();
                        DivErrorMessageScriptBuilder(ref strScript, "none", "");
                        strScript += "document.location.assign('Forms/PatientsVisits/PatientsVisitsForm.aspx');";
                    }
                    else
                        DivErrorMessageScriptBuilder(ref strScript, "block", "The new password is duplicate with your 5 previous passwords...");
                }
                catch (Exception err)
                {
                    DivErrorMessageScriptBuilder(ref strScript, "block", "Error in updating new password, please contant System Administrator...");
                    gClass.AddErrorLogData(String.Empty, Request.Url.Host, String.Empty, "Login Form", "Update new password function", err.ToString());
                }
        }
        /**/
        ScriptManager.RegisterStartupScript(btnLogonServer, btnLogonServer.GetType(), "key", strScript, true);
    }

    /// <summary>
    /// Sets base data after user's credential process is done successfully.
    /// </summary>
    private void SetBaseData(ref Lapbase.Business.Login objLogin)
    {
        base.UserPracticeCode = objLogin.UserPracticeCode;// gClass.User_SNo;
        base.Imperial = objLogin.Imperial;// gClass.SD_Imperial;
        base.VisitWeeks = objLogin.VisitWeeks;// gClass.VisitWeeksFlag;
        base.OrganizationCode = objLogin.OrganizationCode; //Int32.TryParse(gClass.OrganizationCode, out intTemp) ? intTemp : 0;
        base.Direction = objLogin.PageDirection;
        base.SuperBill = objLogin.SuperBill;
        base.EMR = objLogin.EMR;
        base.PermissionLevel = objLogin.PermissionLevel;
        base.SurgeonID = objLogin.SurgeonID;
        base.DataClamp = objLogin.DataClamp;
        base.PracticeBoldCode = objLogin.PracticeBoldCode;
        System.Configuration.ConfigurationManager.AppSettings["PracticeCEOCode"] = objLogin.PracticeBoldCode;
        //base.DefaultSort = objLogin.DefaultSort;

        SaveUserApplicationData();

        Response.SetCookie(new HttpCookie("UserPracticeCode", objLogin.UserPracticeCode.ToString()));
        //Response.SetCookie(new HttpCookie("Group_Code", gClass.Group_Code.ToString()));
        Response.SetCookie(new HttpCookie("Logon_UserName", objLogin.UserFullName));
        Response.SetCookie(new HttpCookie("Imperial", objLogin.Imperial.ToString()));
        Response.SetCookie(new HttpCookie("VisitWeeksFlag", objLogin.VisitWeeks.ToString()));
        Response.SetCookie(new HttpCookie("OrganizationCode", objLogin.OrganizationCode.ToString()));
        Response.SetCookie(new HttpCookie("SubmitData", objLogin.SubmitData.ToString()));
        Response.SetCookie(new HttpCookie("AutoSave", objLogin.AutoSave.ToString()));
        Response.SetCookie(new HttpCookie("SuperBill", objLogin.SuperBill.ToString()));
        Response.SetCookie(new HttpCookie("EMR", objLogin.EMR.ToString()));
        Response.SetCookie(new HttpCookie("PermissionLevel", objLogin.PermissionLevel.ToString().ToLower()));
        Response.SetCookie(new HttpCookie("SurgeonID", objLogin.SurgeonID.ToString()));
        Response.SetCookie(new HttpCookie("DataClamp", objLogin.DataClamp.ToString()));
        //Response.SetCookie(new HttpCookie("DefaultSort", objLogin.DefaultSort.ToString().ToLower()));
        Response.SetCookie(new HttpCookie("PracticeBoldCode", objLogin.PracticeBoldCode.ToString()));

        //HttpCookie aCookie = Request.Cookies["DefaultSort"];
        //aCookie.Expires = DateTime.Now.AddDays(-1);
        //Response.Cookies.Add(aCookie);

    }

    #region private Boolean CheckUserData(ref string strReturn)
    /*
     * this function checks the user credentials and sets cookies' values, and if there is any error, it returns proper error messages
     */
    /*
    private Boolean CheckUserData(ref string strReturn)
    {
        Boolean Loginflag = true;
        //gClass.LanguageCode = Request.Cookies["LanguageCode"].Value;
        gClass.LanguageCode = base.LanguageCode;
        if ((txtUserID.Text.Trim() == "") || (txtUserPW.Text.Trim() == ""))
        {
            gClass.ErrorAlias = "E0001";
            gClass.FetchError();
            strReturn = gClass.ErrorDesc;
            Loginflag = false;
        }
        else
        {
            gClass.UserID = txtUserID.Text.Trim().Replace("'", "");
            gClass.UserPassword = txtUserPW.Text.Trim().Replace("'", "");
            gClass.OrganizationCode = Request.Url.Host;

            try
            {
                switch (gClass.IsValidUserNamePassword(txtUserPW.Text.Trim(), ref txtTest, true))
                {
                    case 0:     // The username or password is incorrect
                        gClass.ErrorAlias = "E0002";
                        gClass.FetchError();
                        strReturn = gClass.ErrorDesc;
                        Loginflag = false;
                        break;

                    case 1:     // The user is valied
                        Int32 intTemp = 0;

                        SetLanguageInfo((lblCultureInfo.Text.Length > 0 ? lblCultureInfo.Text : cmbLanguage.SelectedValue));
                        strReturn = string.Empty;

                        base.UserPracticeCode = gClass.User_SNo;
                        base.Imperial = gClass.SD_Imperial;
                        base.VisitWeeks = gClass.VisitWeeksFlag;
                        base.OrganizationCode =  Int32.TryParse(gClass.OrganizationCode, out intTemp) ? intTemp : 0;
                        base.UserName = gClass.UserFullName;
                        SaveUserApplicationData();

                        Response.SetCookie(new HttpCookie("UserName", gClass.UserFullName));
                        Response.SetCookie(new HttpCookie("UserPracticeCode", gClass.User_SNo.ToString()));
                        Response.SetCookie(new HttpCookie("Group_Code", gClass.Group_Code.ToString()));
                        Response.SetCookie(new HttpCookie("Logon_UserName", gClass.UserFullName));
                        Response.SetCookie(new HttpCookie("Imperial", gClass.SD_Imperial.ToString()));
                        Response.SetCookie(new HttpCookie("VisitWeeksFlag", gClass.VisitWeeksFlag.ToString()));
                        Response.SetCookie(new HttpCookie("OrganizationCode", gClass.OrganizationCode));
                        Response.SetCookie(new HttpCookie("RoleID", gClass.User_RoleID.ToString()));
                        gClass.SaveUserLogFile(gClass.User_SNo.ToString(), Response.Cookies["Logon_UserName"].Value,
                                            Request.Url.Host, "Login Form", 2, "Login", "User SNo", gClass.User_SNo.ToString());
                        break;

                    case 2: // The user is valid but the account is suspended
                        gClass.ErrorAlias = "E0003";
                        gClass.FetchError();
                        strReturn = gClass.ErrorDesc;
                        Loginflag = false;
                        break;
                }
            }
            catch (Exception ex) { Loginflag = false; txtTest.Value += "  " +  ex.ToString(); gClass.AddErrorLogData("0", Request.Url.Host, "", "Login Page", "CheckUserData function", ex.ToString()); }
        }
        
        return Loginflag;
    }
     */
    #endregion

    #region private void SetLanguageInfo(string strCulture)
    /*
     * when user changes the selected language, this function sets the 2 cookies for the culture of selected language and Direction (Right To Left and Left To Right)
     */
    private void SetLanguageInfo(string strCulture)
    {
        char[] delimiterChars = {' '};
        string[] strWords = strCulture.Split(delimiterChars);

        base.LanguageCode = strWords[0];
        base.CultureInfo = strWords[1];
        base.Direction = strWords[2];


        Request.Cookies.Set(new HttpCookie("LanguageCode", base.LanguageCode));
        Response.Cookies.Set(new HttpCookie("LanguageCode", base.LanguageCode));
        Response.Cookies.Set(new HttpCookie("CultureInfo", base.CultureInfo));
        Response.Cookies.Set(new HttpCookie("Direction", base.Direction));
        return;
    }
    #endregion

    #region private void ControlUnsucessfulLogin()
    /*
     * if user enters wrong credential, by calling this function, the application calculate the number of entering wrong credetial, 
     * after 5 times, entering wrong data, the user is suspented
     */
    private void ControlUnsucessfulLogin()
    {
        try
        {
            Session[txtUserID.Text.Trim()] = (Convert.ToInt16(Session[txtUserID.Text.Trim()].ToString()) + 1).ToString();
            if (Session[txtUserID.Text.Trim()].ToString().Equals("5"))
                DoUserSuspending();
        }
        catch { Session[txtUserID.Text.Trim()] = "1"; }
    }
    #endregion 

    #region private void DoUserSuspending()
    /*
     * this function is to suspend the user account by changing the PERMISSIONFLAG to 0 on tblUsers
     */
    private void DoUserSuspending()
    {
        System.Data.SqlClient.SqlCommand cmdCommand = new System.Data.SqlClient.SqlCommand();

        gClass.MakeStoreProcedureName(ref cmdCommand, "sp_UsersManagement_ActivateUser", false);
        cmdCommand.Parameters.Add("@UserPracticeCode", SqlDbType.Int).Value = 0;
	    cmdCommand.Parameters.Add("@UserID", SqlDbType.VarChar, 25).Value = txtUserID.Text.Trim();
        cmdCommand.Parameters.Add("@strOrganizationName", SqlDbType.VarChar, 100).Value = Request.Url.Host.ToLower();
        cmdCommand.Parameters.Add("@PermissionFlag", SqlDbType.Int).Value = 0;
        gClass.ExecuteDMLCommand(cmdCommand);

        string strScript = String.Empty; 
        strScript += "SetInnerText(document.getElementById('pErrorMessage'), 'Your account is expired, please contact the system administrator...');";
        ScriptManager.RegisterStartupScript(btnLogonServer, btnLogonServer.GetType(), "key", strScript, true);
    }
    #endregion 

    #region private Boolean IsNewUser()
    /*
    private Boolean IsNewUser()
    {
        Boolean flag = true;

        System.Data.SqlClient.SqlCommand cmdCommand = new System.Data.SqlClient.SqlCommand();
        gClass.MakeStoreProcedureName(ref cmdCommand, "sp_UserManagement_IsNewUser", false);

        cmdCommand.Parameters.Add("@UserPracticeCode", SqlDbType.Int).Value = Convert.ToInt32(Response.Cookies["UserPracticeCode"].Value);
        try{flag = (gClass.FetchData(cmdCommand, "tblUser").Tables[0].Rows.Count == 0);}catch{}
        return flag;
    }
     */
    #endregion 

    #region private Boolean CheckLast5Password()
    /*
     * if this is the first login, users should change their password, 
     * in this case, the new password should be different with the 5 last password,
     * this function is to do this control
     */
    /*
    private Boolean CheckLast5Password()
    {
        Boolean flag = false;
        DataView dvUser;

        System.Data.SqlClient.SqlCommand cmdCommand = new System.Data.SqlClient.SqlCommand();
        
        gClass.MakeStoreProcedureName(ref cmdCommand, "sp_UsersManagement_GetLast5Password", false);

        cmdCommand.Parameters.Add("@UserPracticeCode", SqlDbType.Int).Value = Convert.ToInt32(Request.Cookies["UserPracticeCode"].Value);
        dvUser = gClass.FetchData(cmdCommand, "tblUser").Tables[0].DefaultView;

        for (int xh = 0; (xh < dvUser.Count) && !flag; xh++){
            string  strHexPassword = HexEncoding.ToString(gClass.GetSecureBinaryData(txtNewUserPW.Text.Trim())), 
                    strUserPW = HexEncoding.ToString((byte[])dvUser[xh]["UserPassword"]).Substring(0, strHexPassword.Length) ;
            flag = strHexPassword.Equals(strUserPW);
        }

        return flag;
    }
     */
    #endregion

    #region private void UpdatePasswordHistory()
    /*
     * if the new password is Ok (after checking with last 5 passwords), 
     * this function is to update the new password.
     */
    /*
    private void UpdatePasswordHistory()
    {
        System.Data.SqlClient.SqlCommand cmdCommand = new System.Data.SqlClient.SqlCommand();
        gClass.MakeStoreProcedureName(ref cmdCommand, "sp_UsersManagement_UpdatePassword", false);
        cmdCommand.Parameters.Add("@UserPracticeCode", SqlDbType.Int).Value = Convert.ToInt32(Request.Cookies["UserPracticeCode"].Value);
        cmdCommand.Parameters.Add("@NewPassword", SqlDbType.VarBinary, 50).Value = gClass.GetSecureBinaryData(txtNewUserPW.Text.Trim().Replace("'", ""));
        gClass.ExecuteDMLCommand(cmdCommand);
    }
     */
    #endregion 

    #region private void DivErrorMessageScriptBuilder(ref String strScript, String strDisplay, String strMessage)
    private void DivErrorMessageScriptBuilder(ref String strScript, String strDisplay, String strMessage)
    {
        strScript += "document.getElementById('divErrorMessage').style.display = '" + strDisplay + "';";
        strScript += "SetInnerText(document.getElementById('pErrorMessage'), '" + strMessage + "');";
    }
    #endregion 

    /// <summary>
    /// Save User's application data when the Authentication is done successfully.
    /// </summary>
    private void SaveUserApplicationData()
    {
        Lapbase.Data.UserApplicationData userApplicationData = new Lapbase.Data.UserApplicationData();

        userApplicationData.SessionID = Session.SessionID;
        userApplicationData.OrganizationCode = base.OrganizationCode;
        userApplicationData.UserPracticeCode = base.UserPracticeCode;
        userApplicationData.Imperial = base.Imperial;
        userApplicationData.VisitWeeksFlag = base.VisitWeeks;
        userApplicationData.LanguageCode = base.LanguageCode;
        userApplicationData.CultureInfo = base.CultureInfo;
        userApplicationData.Direction = base.Direction;

        userApplicationData.Save();
    }
}

